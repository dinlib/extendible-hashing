==10056== Memcheck, a memory error detector
==10056== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==10056== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==10056== Command: ./hashing
==10056== Parent PID: 2158
==10056== 
==10056== Conditional jump or move depends on uninitialised value(s)
==10056==    at 0x108EF0: find_new_range (bucket.c:141)
==10056==    by 0x108C72: bk_split (bucket.c:101)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 
==10056== Conditional jump or move depends on uninitialised value(s)
==10056==    at 0x108AF5: make_address (bucket.c:59)
==10056==    by 0x108FDA: redis_keys (bucket.c:164)
==10056==    by 0x108CC2: bk_split (bucket.c:106)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 
==10056== Conditional jump or move depends on uninitialised value(s)
==10056==    at 0x108AF5: make_address (bucket.c:59)
==10056==    by 0x108B64: op_find (bucket.c:77)
==10056==    by 0x108D04: op_add (bucket.c:111)
==10056==    by 0x108BF0: bk_add_key (bucket.c:87)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 
==10056== Conditional jump or move depends on uninitialised value(s)
==10056==    at 0x108C20: bk_split (bucket.c:92)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x108BF0: bk_add_key (bucket.c:87)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 
==10056== Invalid read of size 8
==10056==    at 0x108DC8: dir_double (bucket.c:123)
==10056==    by 0x108C2B: bk_split (bucket.c:93)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x108BF0: bk_add_key (bucket.c:87)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056==  Address 0x52028d0 is 0 bytes after a block of size 16 alloc'd
==10056==    at 0x4C2DB2F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10056==    by 0x108D7C: dir_double (bucket.c:119)
==10056==    by 0x108C2B: bk_split (bucket.c:93)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 
==10056== Invalid write of size 8
==10056==    at 0x108DCB: dir_double (bucket.c:123)
==10056==    by 0x108C2B: bk_split (bucket.c:93)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x108BF0: bk_add_key (bucket.c:87)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056==  Address 0x5202a10 is 0 bytes after a block of size 32 alloc'd
==10056==    at 0x4C2DB2F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10056==    by 0x108D7C: dir_double (bucket.c:119)
==10056==    by 0x108C2B: bk_split (bucket.c:93)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x108BF0: bk_add_key (bucket.c:87)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 
==10056== Invalid read of size 8
==10056==    at 0x108DFF: dir_double (bucket.c:124)
==10056==    by 0x108C2B: bk_split (bucket.c:93)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x108BF0: bk_add_key (bucket.c:87)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056==  Address 0x52028d0 is 0 bytes after a block of size 16 alloc'd
==10056==    at 0x4C2DB2F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10056==    by 0x108D7C: dir_double (bucket.c:119)
==10056==    by 0x108C2B: bk_split (bucket.c:93)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 
==10056== Invalid write of size 8
==10056==    at 0x108E02: dir_double (bucket.c:124)
==10056==    by 0x108C2B: bk_split (bucket.c:93)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x108BF0: bk_add_key (bucket.c:87)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056==  Address 0x5202a18 is 8 bytes after a block of size 32 alloc'd
==10056==    at 0x4C2DB2F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10056==    by 0x108D7C: dir_double (bucket.c:119)
==10056==    by 0x108C2B: bk_split (bucket.c:93)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x108BF0: bk_add_key (bucket.c:87)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 
==10056== Conditional jump or move depends on uninitialised value(s)
==10056==    at 0x108AF5: make_address (bucket.c:59)
==10056==    by 0x108B64: op_find (bucket.c:77)
==10056==    by 0x108D04: op_add (bucket.c:111)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 
==10056== Conditional jump or move depends on uninitialised value(s)
==10056==    at 0x108C20: bk_split (bucket.c:92)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)
==10056== 

valgrind: m_mallocfree.c:277 (mk_plain_bszB): Assertion 'bszB != 0' failed.
valgrind: This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==10056==    at 0x38089E4A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==10056==    by 0x38089F64: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==10056==    by 0x3808A0FA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==10056==    by 0x38098AD4: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==10056==    by 0x38052874: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==10056==    by 0x38052A6A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==10056==    by 0x380E25B3: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==10056==    by 0x380F18B0: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 10056)
==10056==    at 0x4C2DB2F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10056==    by 0x108C35: bk_split (bucket.c:95)
==10056==    by 0x108BE6: bk_add_key (bucket.c:86)
==10056==    by 0x108D19: op_add (bucket.c:112)
==10056==    by 0x1090F2: main (main.c:20)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

